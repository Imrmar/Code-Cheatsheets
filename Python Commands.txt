PYTHON datové TYPY

	List (list) 		- [10,"hello",200.3]				- Ordere sequence of obejcts
	Dictionary (dict) 	- {"mykey":"123","name":"Frankie"}  - Unordered Key:Value pair
	Tuples (tup)		- (10,"hello",200.3)				- Ordered immutable (neměnný) sequence of objects
	Sets (set)			- {"a","b"}							- Unordered collection of unique objects

PYTHON PRIKAZY
CMD -> PYTHON mezera NAZEV_SKRIPTU

TYPY objektů ---------------------------------------------------------------------------------------
	type() - zjistime typ objektu
	float(),int() -> precastuje cislo na dany typ

INPUT OUTPUT ---------------------------------------------------------------------------------------
	print() - vytiskne
	input("Type something.. ") -> prevezme input, ktery napisu do commandliny

POCITANI -------------------------------------------------------------------------------------------
	i//j - vrati cele cislo po deleni, bez desetin
	i%j - vrati zbytek po deleni
	i**j - mocnina
	2*2 = 4
	2.0*2 = 4.0 - python preferuje vyssi presnost
	X = 23
	X == 0 - equal -> dve zavorky porovnani
	X != 0 - not equal

SYNTAXE --------------------------------------------------------------------------------------------
---------
	ELSE IF
		IF <condition>:
			<expresion>
			<expresion>

		ELIF <condition>:
			<expresion>
			<expresion>
		ELSE:
			<expresion>
			<expresion>
----------
	WHILE <condition>:  -> pokavad je podminka false, vyhodnoti se "prvni" vnitrni expresina, pokud True, vyhodnoti se zaverecna
			<expresion>
		<expresion>
----------
	FOR n in range(5):  -> n < 5 -> 0,1,2,3,4
		print(n)

	FOR n in range(7:10) -> 7,8,9

	FOR n in range(5,11,2) -> 5,7,9

TEXT WORK --------------------------------------------------------------------------------------------
	'ERIC'[1] = e
	'ERIC'[1:3] = ri
	'ERIC'[:3] = eri
	'Education'[0:10:2] = EUAIN
	'ERIC'[::-1] = CIRE

	x = "Eric is best"

SPLIT
	x.split() = ["Eric","is","best"]   -> splits string based on whitespaces
	x.split(e) = ["ric is b", "st"]		-> splits based on  "e"

FORMAT
	print("This is string {}".format("XXXX")) -> This is string XXXX  	- .format() insert its input into{}
	print("This" {} {} {}".format("is", "string","xxx")) 				- we can insert multiple strings
	print("This {3} {1} {2}".format("is", "string","xxx")) 				- This xxx is string
	print("This {x} {y} {z}".format(x="is", y="string",z="xxx"))

	Format with float {value:width.precision f} - width is like char(10) -> empty characters filled with whitespace
	x =0.123456123456
	print("This {x:1.3 f}".format(x))

	print(f"string {}") - Alternative to format (same funcitonality with different syntax)
	x = Martin
	print(f"His name is {x}") -> His name is Martin


LIST WORK ---------------------------------------------------------------------------------------------
	my_list = ["Cat", "Dog", "Turtle"]
	my_list[1:] = ["Dog", "Turtle"]

APEND()
	my_list.append("Shark") -> ["Cat", "Dog", "Turtle", "Shark"]
	old_list = ["Lion"]
	new_list = my_list + old_list
POP()
	my_list.pop()		-> remove last item of list
	my_list.pop(2)		-> renive item with index 2
SORT()
	my_list.sort()		-> sort items alphabeticaly
REVERSE()
	my_list.reverse()	-> reverse all index 1 <-> 9, 2 <-> 8


DICTIONARY WORK ------------------------------------------------------------------------------------
	my_dict = {'apple':1.99,"milk":5.80}
	my_dict = ["apple"] = 1.99
	my_dict_2 = {'key1':123,'key2':[12,23,33],'key3':['item0','item1','item2']} - list or another dict can be inside dictionary
	my_dict["bread"] = 3.20		- adding new element
	my_dict["apple"] = 2.29		- we can reassign values
ITEMS()		
	my_dict.ites() -> {'apple':1.99,"milk":5.80} 	-it will show all keays
VALUES()			
	my_dict.values()	-> (1.99,5.80)


TUPLES WORK ---------------------------------------------------------------------------------------
	- Immutable - cannot be changed
	- Great for data integrity 
	my_tuple  = ('one',2)
	my_tuple(1,2,3)		
LEN()
	my_tuple.len()=3
INDEX()
	my_tuple.index("one") = 0  		- returns index position
COUNT()
	my_tuple.count(2)	= 1			- count of parameters in tupples