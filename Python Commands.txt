Klávesové zkratky

alt+f []
alt+b {}

----------------------------------------------------------------
USEFUL OPERATORS--------------------------------------------------
----------------------------------------------------------------
CMD -> PYTHON mezera NAZEV_SKRIPTU

INPUT OUTPUT ---------------------------------------------------------------------------------------
	print() - vytiskne
	result = input("Type something.. ") 	# prevezme input, ktery napisu do commandliny

RANGE
	list(range(0,11,2))  # will create list from 0- 11 with step 2

ENUMERATE
	word = 'abcde'
	for item in enumerate(word):    # it will create tuples with index and character
		print(item)

		(0, 'a')
		(1, 'b') etc

ZIP 
	my_list = [1,2,3]
	my_list2 =[a,b,c]

	for item in zip(my_list,my_list2):		# it will zip two list into touples (it will take length of shortest list)
		print(item)

		(1, 'a')
		(2, 'b') etc

IN
	'a' in 'monkey'
	'mykey' in {'mykey':345}

MAP
	my_list = [1,2,3,4,5]
	square() #my function to create squere from number
	list(map(square,my_list)) # this will apply function to all elements of the list

FILTER
	my_list = [1,2,3,4,5]
	check_even() #my funciton to check even numbers
	list(filter(check_even,my_list))  #filter all even numbers out

LAMBA FUNCTIONS
	lambda num: num**2 # nameless function, right side is returned automatical
					   # can be used in MAP or FILTER
	list(map(lambda num: num**2),mylist)


POCITANI -------------------------------------------------------------------------------------------
	i//j 			# vrati cele cislo po deleni, bez desetin
	i%j 			# vrati zbytek po deleni
	i**j 			# mocnina
	2*2 = 4
	2.0*2 = 4.0 	# python preferuje vyssi presnost
	X = 23
	X == 0 			# equal -> dve zavorky porovnani
	X != 0 			# not equal


------------------------------------------------------------------
PYTHON datové TYPY------------------------------------------------
------------------------------------------------------------------
	List (list) 		- [10,"hello",200.3]				# Ordere sequence of obejcts
	Dictionary (dict) 	- {"mykey":"123","name":"Frankie"}  # Unordered Key:Value pair
	Tuples (tup)		- (10,"hello",200.3)				# Ordered immutable (neměnný) sequence of objects
	Sets (set)			- {"a","b"}							-# Unordered collection of unique objects

TEXT WORK --------------------------------------------------------------------------------------------
	'ERIC'[1] = e
	'ERIC'[1:3] = ri
	'ERIC'[:3] = eri
	'Education'[0:10:2] = EUAIN
	'ERIC'[::-1] = CIRE

	x = "Eric is best"

SPLIT
	x.split() = ["Eric","is","best"]   # splits string based on whitespaces
	x.split(e) = ["ric is b", "st"]		# splits based on  "e"

JOIN
	" ".join(my_list) = ["It", "is", "joined"]	-> "It is joined"
	"--".join(my_list) = ["It", "is", "joined"]	-> "It--is--joined"
 
FORMAT
	print("This is string {}".format("XXXX")) # This is string XXXX  	- .format() insert its input into{}
	print("This {} {} {}".format("is", "string","xxx")) 				# we can insert multiple strings
	print("This {3} {1} {2}".format("is", "string","xxx")) 				# This xxx is string
	print("This {x} {y} {z}".format(x="is", y="string",z="xxx"))

	Format with float {value:width.precision f} - width is like char(10) # empty characters filled with whitespace
	x =0.123456123456
	print("This {x:1.3 f}".format(x))

	print(f"string {}") # Alternative to format (same funcitonality with different syntax)
	x = Martin
	print(f"His name is {x}") # His name is Martin


--------------------------------------------------------------------------------
LIST WORK ---------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------
	my_list = ["Cat", "Dog", "Turtle"]
	my_list[1:] = ["Dog", "Turtle"]

APEND()
	my_list.append("Shark") -> ["Cat", "Dog", "Turtle", "Shark"]
	old_list = ["Lion"]
	new_list = my_list + old_list
POP()
	my_list.pop()		# remove last item of list
	my_list.pop(2)		# renive item with index 2
SORT()
	my_list.sort()		# sort items alphabeticaly
REVERSE()
	my_list.reverse()	# reverse all index 1 <-> 9, 2 <-> 8

SPLIT()
	x.split() = ["Eric","is","best"]   # splits string based on whitespaces
	x.split(e) = ["ric is b", "st"]		# splits based on  "e"


LIST COMPREHANSION -------------------------------------------------------------------------------
	# to create list from string
	mystring = 'hello'
	mylist = [letter for letter in mystring] 		# it comes from for letter in mystring: mylist.append(letter)
	mylist = [num for num in range(0,11)]
	mylist = [num**2 for num in range(0,11)]

	mylist = [x*y for x in [1,2,3] for y in [1,10,1000]]  #creates lists
IF ELESE COMPREHANSION
	#one condition
	x = [i for i in range(1,51) if i%3 ==0]
	#two conditions
	results = [x if x%2==0 else 'ODD' for x in range(0,11)]


--------------------------------------------------------------------------------
DICTIONARY WORK ------------------------------------------------------------------------------------
--------------------------------------------------------------------------------
	my_dict = {'apple':1.99,"milk":5.80}
	my_dict = ["apple"] = 1.99
	my_dict_2 = {'key1':123,'key2':[12,23,33],'key3':['item0','item1','item2']} # list or another dict can be inside dictionary
	my_dict["bread"] = 3.20		# adding new element
	my_dict["apple"] = 2.29		# we can reassign values
ITEMS()		
	my_dict.ites() -> {'apple':1.99,"milk":5.80} 	-it will show all keays
VALUES()			
	my_dict.values()	-> (1.99,5.80)
KEYS()
	my_dict.ites() -> ('apple',"milk")

--------------------------------------------------------------------------------
TUPLES WORK ---------------------------------------------------------------------------------------
--------------------------------------------------------------------------------
	# Immutable - cannot be changed
	# Great for data integrity 
	my_tuple  = ('one',2)
	my_tuple(1,2,3)		
LEN()
	my_tuple.len()=3
INDEX()
	my_tuple.index("one") = 0  		# returns index position
COUNT()
	my_tuple.count(2)	= 1			# count of parameters in tupples


--------------------------------------------------------------------------------
SET WORK ------------------------------------------------------------------------------------
--------------------------------------------------------------------------------
	# only unique values can be stored
	# no ordering
	my_set = {1}
	my_set.add(2) -> {1,2}
	my_list = [1,2,3,5,5,5,4,2,3]
	set(my_list) -> {1,2,3,5,4}
	set("Mississipi") -> {"M","i","s","p"}


FILE WORK -----------------------------------------------------------------------------------
DIRECTIORY
	C:\\Users\\Martin\\Documents 	# double backslash

WRITE
	my_file.write("this is the new string")
	%%writefile myfile.txt
		This is test string in file
	
OPEN()
	# need to be in same folder as is pwd

READ() 
	# need to be in same folder as is pwd
	read(myfile.txt) - "This is test string in file"
	# in case of re-reading the file, we need to put cursor to 0 position
	myfile.seek(0)

READLINES()
	# each line is printed as single line (keep the strucutre of txt file)

CLOSE()
	# after opening file, to let python stop working with it

WITH()
	- resource manager, it will open and close file for us
	with open('myfile.txt') as my_new_file:
		contets = my_new_file.read()

	with open('myfile.txt', mode='r') 		 #only read
	with open('myfile.txt', mode='w') 		 #only write - recreate the file
	with open('myfile.txt', mode='a') 		 #only append new text

----------------------------------------------------------------------
CONTROL FLOW ---------------------------------------------------------
----------------------------------------------------------------------

IF ELSE  --------------------------------------------------------------------------------------------
	ELSE IF
		IF <condition>:
			<expresion>
			return True

		ELIF <condition>:
			<expresion>
			return False
		ELSE:
			<expresion>
			<expresion>
WHILE LOOP-------------------------------------------------------------------------------------------
	WHILE x < 5: 
		print(x)
		x += 1
	ELSE:	
		print("x is = 5")


FOR N IN LOOP-------------------------------------------------------------------------------------------
	FOR n in range(5):  -> n < 5 	-> 0,1,2,3,4
		print(n)

	FOR n in range(7:10) 			-> 7,8,9

	FOR n in range(5,11,2) 			-> 5,7,9

	my_list = [(1,2),(2,3),(4,5)]
	FOR a,n in my_list:
		print(a)
		print(n)


FOR loop with dictionary
	d ={"k1":1,"k2":2,"k3":3}
	for keyval in d.items()
		print(keyval)				->("k1",1) ("k2":2)

	for key, value in d.items()
		print(value)				->1,2,3

	for keyval in d.values()
		print(keyval)				-> 1,2,3


FLOW CONTROL FUNCTIONS---------------------------------------------------------------------------
PASS 
	for i in x:
		pass
		#pass will do nothing and for loop will not fail on syntax

CONTINUE #Goes to top of the closest enclosing loop

BREAK 	#breaks the loop of the loop 


----------------------------------------------------------------------
METHODS---------------------------------------------------------------
----------------------------------------------------------------------
https://docs.python.org/3/  #documentiation
#methods are functions attached to an object

mylist.apend(), mylist.index() # those functions are connected to a class/object

mylist. -> #click on tab will show all methods
mylist.insert -> #shift+tab will show you what the method is
help(mylist.insert) -> # show help to the method

----------------------------------------------------------------------
FUNCTIONS-------------------------------------------------------------
----------------------------------------------------------------------
# standalone functions without object
max(), min() etc.

---------
def name_of_function(name):
	''' # multiline comment with 3 quotes
	Docstring exlpains functions 
	'''
	print("Hello "+name)

>> name_of_function("Karel")

----------
def add_function(num1,num2):
	return num1+num2		#return value which can be assign to variable

>> x = add_function(2,5)

DEFAULT INPUT
def say_hello(name="Default"):
	print(f"Hello {name}")

say_hello()				-> Hello Default
say_hello("Martin")		-> Hello Martin


---------------------------------------------------------------------------
*ARGS and **KWARGS---------------------------------------------------------
---------------------------------------------------------------------------

def myfunc(*args):				#python will save all parameters as tuples inserted - we can put any number of them
	return sum(args) * 0.05 


def myfunc(**kwargs):			#we can use any number of key:value pairs
	if "fruit" in kwargs:
		print("My fruit of choice is {}".format(kwargs["fruit"]))
	else:
		print("I did not find any fruit here")


def myfunc(*args,**kwargs):
	print("I would like {} {}".format(args[0],kwargs["food"]))


-----------------------------------------------------------------------------
LEGB Rule - Local, Enclosing function locals, Global, Built-in --------------
-----------------------------------------------------------------------------
#L: Local — Names assigned in any way within a function (def or lambda), and not declared global in that function.

#E: Enclosing function locals — Names in the local scope of any and all enclosing functions (def or lambda), from inner to outer.

#G: Global (module) — Names assigned at the top-level of a module file, or declared global in a def within the file.

#B: Built-in (Python) — Names preassigned in the built-in names module : open, range, SyntaxError,...

x = 50
def func():
	global x			# it will affect global variable x instead of local variable
	print(f"y us {x}")

or 

x = func(x)				# resassign variable to global and is better readable




-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
Object oriented programing --------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
#https://www.udemy.com/course/complete-python-bootcamp/learn/lecture/9478292#questions

class Dog():      # classes uses camel casing 

	# CLASS OBJECT ATTRIBUTS
	# SAME FOR ANY INSTANCE OF A CLASS
	species = "mammal"

	def __init__(self, breed, age, spots): 	# it is constructor of instance of this object  
		self.breed = breed			# and we init param1 and param2 and we use them localy
		self.age = age			# so the instance will use local params instead global
		self.spots = spots

	def is_breed(self):			# Method (not function), since it is interaging with the class
		#print something
		print(self.breed)


my_dog = Dog()   # it will create instance of class

my_dog.species 	 # it will show variable of instance

my_dog.is_breed()	# will call method of dogs class


Polymorphism-----------------------------------------------------------------------
class Dog():      

	def __init__(self,name):
		self.name = name		

	def speaks(self):			# same function as cats, but works differently -> plymorphism
		print("Haf")

class Cat():      

	def __init__(self,name):
		self.name = name		

	def speaks(self):
		print("Moew")			# same function as cats, but works differently -> plymorphism


Inheritance------------------------------------------------------------------------
class Animal():

	def __init__(self):
		print("Animal created")

	def who_am_i(self):
		print("I am an animal")

	def eat(self):
		print("I am eating!")

class Dog(Animal): 		# Class dog will ingerite all methods of Animal() class

	def __init__(self):
		Animal.__init__(self)		# creating instance of animal
		print("Dog created")

mydog = Dog()

	>> Animal created
	>> Dog created


Special methods------------------------------------------------------------------------
# special methods which replace known methods, such as STR(), LEN(), DEL() etc

class Book:
    def __init__(self, title, author, pages):
        print("A book is created")
        self.title = title
        self.author = author
        self.pages = pages

bk = book()		 # vytvorime instanci classy kniha

    def __str__(self):		# __str__ should always return and not print
        return "Title: %s, author: %s, pages: %s" %(self.title, self.author, self.pages)

print(bk)	# vrati nam vzdy hodnotu metody __str__(self) !!!!!!!!!!!

    def __len__(self):
        return self.pages

    def __del__(self):
        print("A book is destroyed")


----------------------------------------------------------------------
Python packages - LIBRARIES-------------------------------------------------------------
----------------------------------------------------------------------
#https://www.udemy.com/course/complete-python-bootcamp/learn/lecture/9497628#overview

PIP # download packages from PyPi repository and install them trough your command
-------
EXAMPLE
-------
windows cmd 
>>pip install requests		# download and install package called "requests"
>>pip install colorama		# some funny color font package
>>python
>>>from colorama import init
>>>from colorama import Fore
>>>print(Fore.RED + " some red text")

IMPORT methods/functions			
	from random import shuffle 			# 'random' is name of library in python - randomy shuffle values in list
	from random import randint			# random(0,100) - random number from range

Modules ------------------------------------------
#module is py script which can be used in other scipt
#packages is collections of modules

from mymodule import my_func		# by this functionality, you can import a function from your module

Packages -------------------------------------------
# folder with modules 
# in folders for modules is importent to create file "__init__.py"
# to let him know that it is module folder

from MyMainPackageFolder import some_module
from MyMainPackageFolder.SubfolderPackage import some_module_2


# normal structure of scripts is having defined functions at beginning
# and logic of how it is run down in __name__ == "__main__"

def myfunc()
def func1()
def func2()

if __name__ == "__main__":  # if the script is called direclty ("__name__") by CMD, do following 
	print("Script is being run directly!")
	myfunc()
	func1()
	func2()
else:
	print("Script has been imported!")


----------------------------------------------------------------------
Error and Exception Handling -----------------------------------------
----------------------------------------------------------------------
try:	#we are going to try following code and in case of ANY error, it jumps to except
	result = 10 + "10"	# could be results = 10 + var1 ("10")

except:	#except is run in case of error
	print("Adding integer and string is not supported")
else:	#in case of NO error, run this
	print("Add went well!")
	print(result)

------ #https://docs.python.org/3/library/exceptions.html
try:
	f = open("testfile", "w")
	f.write("something")

except TypeError:	# we can define specific error
	print("Wrong type operations!")
except OSError:
	print("Hey you have an OS Error")
finally:			# it will print after all exception
	print("everything runs fine")